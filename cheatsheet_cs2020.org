#+AUTHOR: Jethro Kuan
#+LATEX_HEADER: \documentclass[8pt]{extarticle}
#+LATEX_HEADER: \usepackage[margin={0.3in,0.3in}, a4paper,landscape]{geometry}
#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{booktabs}
#+LATEX_HEADER: \usepackage{titlesec}
#+LATEX_HEADER: \titleformat*{\section}{\large\bfseries}
#+LATEX_HEADER: \titleformat*{\subsection}{\normalsize\bfseries}
#+LATEX_HEADER: \titleformat*{\subsubsection}{\normalsize\bfseries}
#+LATEX_HEADER: \usemintedstyle{bw}
#+LATEX_HEADER: \setlength\columnsep{10pt}
#+LATEX_HEADER: \setlength{\columnseprule}{1pt}
#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \setlist{nosep}
#+LATEX_HEADER: \usepackage{etoolbox}
#+LATEX_HEADER: \AtBeginEnvironment{minted}{\singlespacing\fontsize{8}{8}\selectfont}

#+OPTIONS: toc:nil

#+BEGIN_EXPORT latex
\begin{multicols*}{2}
#+END_EXPORT
* Comparable
#+BEGIN_SRC java
  class Author implements Comparable<Author>{
      String firstName;
      String lastName;

      @Override
      public int compareTo(Author other){
          // compareTo should return < 0 if this is supposed to be
          // less than other, > 0 if this is supposed to be greater than 
          // other and 0 if they are supposed to be equal
          int last = this.lastName.compareTo(other.lastName);
          return last == 0 ? this.firstName.compareTo(other.firstName) : last;
      }
  }
#+END_SRC
* Quickselect
#+BEGIN_SRC java
  public class QuickSelect {
      private static void swap(int[] arr, int left, int right) {
          int temp = arr[left];
          arr[left] = arr[right];
          arr[right] = temp;
      }

      public static int partition(int[] arr, int left, int right, int pivot) {
          int pivotVal = arr[pivot];
          swap(arr, pivot, left);
          int low = left;
          int high = right+1;
          while(true) {
              while(arr[++low] <= pivotVal) {
                  if( low == right) break;
              }
              while(arr[--high] > pivotVal) {
                  if( high == left) break;
              }
			
              if (low < high) {
                  swap (arr, low, high);
              } else {
                  swap(arr, high, left);
                  break;
              }
          }
	
          return high;
      }
	
      public static int select(int[] arr, int k) {
          int ans = k-1; // k - 1 because arrays are 0-indexed
          Random rand = new java.util.Random();
          int found = -1;
          // select a pivot
          int start = 0;
          int end = arr.length - 1;
    	
          while (start <= end) {
              int pivot = rand.nextInt(end-start + 1) + start;
              int pivotIndex = partition(arr, start, end, pivot);
              if (pivotIndex == ans) {
                  return found = arr[pivotIndex];
              } else if (pivotIndex < ans) {
                  start = pivotIndex + 1;
              } else {
                  end = pivotIndex - 1;
              }
          }
    	
          return found;
      }
  }
#+END_SRC
* =Collections.sort=
=compare= returns =0= if the objects are equal. It returns a
positive value if =obj1= is greater than =obj2=. Otherwise, a negative
value is returned. Below snippet reversees the array.
#+BEGIN_SRC java
  ArrayList<Integer> stuff =  new ArrayList<>(Arrays.asList(1,2,3,4));
  Collections.sort(stuff, new Comparator<Integer>() {
          @Override
          public int compare(Integer i1, Integer i2) {
              if (i1 < i2) {
                  return 1;
              } else {
                  return -1;
              }
          }
		  });
#+END_SRC
* Iterators
#+BEGIN_SRC java
  @Override
  public Iterator<Type> iterator() {
      Iterator<Type> it = new Iterator<Type>() {

              private int currentIndex = 0;

              @Override
              public boolean hasNext() {
                  return currentIndex < currentSize && arrayList[currentIndex] != null;
              }

              @Override
              public Type next() {
                  return arrayList[currentIndex++];
              }

              @Override
              public void remove() {
                  throw new UnsupportedOperationException();
              }
          };
      return it;
  }
#+END_SRC
* Interfaces
** Stack
#+BEGIN_SRC text
  push(T): void
  pop(): T
  size(): T
  isEmpty(): boolean
  top(): T
#+END_SRC
** Queue
#+BEGIN_SRC text
  offer(T): boolean
  peek(): T (returns null if empty)
  poll(): T (returns null if empty)
#+END_SRC
** Set
#+BEGIN_SRC text
  add(T) : boolean
  addAll(Coll): boolean
  clear(): void
  contains(T): boolean
  containsAll(T): boolean
  isEmpty(): boolean
  remove(T): boolean
  removeAll(Coll): boolean
  size(): int
#+END_SRC

#+BEGIN_EXPORT latex
\end{multicols*}
#+END_EXPORT

# Local Variables:
# org-latex-minted-options: (("numbersep" "5pt") ("framesep" "2mm")
# ("fontfamily" "tt"))
# End:
